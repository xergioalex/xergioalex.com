name: Check Packages Versions

on:
  workflow_dispatch:
  schedule:
    - cron: '0 15 * * 2'

env:
  GIT_BRANCH_FOR_PACKAGES_UPGRADES: feature__packages_versions_update

jobs:
  check_packages_versions:
    name: 'Check Packages Versions'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.AUTOMATION_GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: '22.13.1'
          registry-url: https://registry.npmjs.org/
      - name: Step 1 - ⚙️ Setup GitHub Config
        run: |
          git config user.name "🤖 DailyBot"
          git config user.email "ops@dailybot.com"
      - name: Step 2 - ⚙️ Download changes from branch with upgrades
        id: creating_pr_step
        run: |
          BRANCH_CREATED='true'
          if [ -n "$(git ls-remote --quiet --heads origin $GIT_BRANCH_FOR_PACKAGES_UPGRADES)" ]; then
            BRANCH_CREATED='false'
          else
            git checkout -b $GIT_BRANCH_FOR_PACKAGES_UPGRADES
          fi
          echo "branch_created=$BRANCH_CREATED" >> $GITHUB_OUTPUT
      - if: ${{ steps.creating_pr_step.outputs.branch_created == 'true' }}
        name: Step 3 - ⚙️ Install Dependencies
        run: |
          echo ${{ steps.creating_pr_step.outputs.branch_created }}
          npm install
      - if: ${{ steps.creating_pr_step.outputs.branch_created == 'true' }}
        name: Step 4 - Check Packages Versions
        run: |
          bash .github/scripts/get_packages_upgrades.sh
      - if: ${{ steps.creating_pr_step.outputs.branch_created == 'true' }}
        name: Step 5 - Check Git Status
        id: check_upgrades_available_step
        run: |
          UPGRADES_AVAILABLE='false'
          if [[ -f "packages_upgrades_output.txt" ]]; then
            UPGRADES_AVAILABLE='true'
          fi
          echo "upgrades_available=$UPGRADES_AVAILABLE" >> $GITHUB_OUTPUT
      - if: ${{ steps.creating_pr_step.outputs.branch_created == 'true' && steps.check_upgrades_available_step.outputs.upgrades_available == 'true' }}
        name: Step 6 - ⚙️ Re-install dependencies with upgrades
        run: npm install
      - if: ${{ steps.creating_pr_step.outputs.branch_created == 'true' && steps.check_upgrades_available_step.outputs.upgrades_available == 'true' }}
        id: git_commit_and_push_changes_step
        name: Step 7 - Commit and push changes to repository branch
        run: |
          git commit -am "Upgrading packages versions"
          git push origin $GIT_BRANCH_FOR_PACKAGES_UPGRADES
      - if: ${{ steps.creating_pr_step.outputs.branch_created == 'true' && steps.check_upgrades_available_step.outputs.upgrades_available == 'true' }}
        name: Step 8 - Creating pull request
        id: creating_pull_request_step
        run: |
          PR_TITLE='🤖 Upgrading packages versions'
          PR_BODY=$(cat packages_upgrades_output.txt)
          gh auth login --with-token <<< "${{ secrets.AUTOMATION_GITHUB_TOKEN }}"
          PR_LINK=$(gh pr create --title "$PR_TITLE" --body "$PR_BODY" --base main --head $GIT_BRANCH_FOR_PACKAGES_UPGRADES)
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_body=$(echo $PR_BODY | sed 's/\\n/\\\\n/g')" >> $GITHUB_OUTPUT
          echo "pr_link=$PR_LINK" >> $GITHUB_OUTPUT

    outputs:
      branch_created: ${{ steps.creating_pr_step.outputs.branch_created }}
      upgrades_available: ${{ steps.check_upgrades_available_step.outputs.upgrades_available }}
      pr_title: ${{ steps.creating_pull_request_step.outputs.pr_title }}
      pr_body: ${{ steps.creating_pull_request_step.outputs.pr_body }}
      pr_link: ${{ steps.creating_pull_request_step.outputs.pr_link }}
